openapi: 3.0.3
info:
  title: cutetopop API
  description: |
    Random image display API with metadata management, tagging, and attribution system.
    Powered by Cloudflare Workers, D1, R2, and KV.

    Live site: https://cutetopop.com

    ## Features
    - Random image serving with metadata
    - Tag system (content, character, creator, source)
    - Artist attribution and credits
    - Image upload and management
    - KV cache for performance
  version: 1.0.0
  contact:
    email: lambda@cutetopop.com
  license:
    name: Various (see image credits)

servers:
  - url: https://cutetopop.com
    description: Production server
  - url: http://localhost:8787
    description: Local development server

tags:
  - name: public
    description: Public API endpoints for image retrieval
  - name: admin
    description: Admin API endpoints (requires authentication)

paths:
  /api/random:
    get:
      tags:
        - public
      summary: Get a random active image
      description: Returns a single random image from the active collection with full metadata, tags, and attribution
      operationId: getRandomImage
      security: []  # Public endpoint, no authentication required
      responses:
        '200':
          description: Successful response with random image data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageWithTags'
              example:
                id: 1
                filename: images/abc123def456.png
                alt_text: Cute cat
                file_size: 524288
                width: 800
                height: 600
                mime_type: image/png
                status: active
                created_at: "2025-01-15T10:30:00Z"
                credit_name: Artist Name
                credit_url: https://example.com/artist
                credit_license: CC BY 4.0
                tags:
                  - name: cute
                    display_name: Cute
                    category: content
                  - name: cat
                    display_name: Cat
                    category: content
        '404':
          description: No images available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/images:
    get:
      tags:
        - public
      summary: List images with pagination
      description: Returns a paginated list of active images with basic metadata
      operationId: listImages
      security: []  # Public endpoint, no authentication required
      parameters:
        - name: limit
          in: query
          description: Maximum number of images to return (max 100)
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of images to skip for pagination
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Successful response with image list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageList'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/stats:
    get:
      tags:
        - public
      summary: Get database statistics
      description: Returns overall statistics about images, tags, and credited artists
      operationId: getStats
      security: []  # Public endpoint, no authentication required
      responses:
        '200':
          description: Successful response with statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
              example:
                total_images: 187
                total_tags: 24
                credited_artists: 12
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /images.json:
    get:
      tags:
        - public
      summary: Get list of all active image filenames
      description: Returns a JSON array of all active image filenames. Cached in KV for performance.
      operationId: getImagesList
      security: []  # Public endpoint, no authentication required
      responses:
        '200':
          description: Successful response with image filenames
          headers:
            X-Source:
              description: Indicates if response came from cache or database
              schema:
                type: string
                enum: [kv-cache, database-fallback]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - images/abc123def456.png
                  - images/def456ghi789.jpg
                  - images/ghi789jkl012.webp

  /api/admin/tags:
    get:
      tags:
        - admin
      summary: Get all tags organized by category
      description: Returns all tags grouped by their category (content, character, creator, source) with usage counts
      operationId: getAllTags
      security: []  # TODO: Authentication not yet implemented - should require ApiKeyAuth
      responses:
        '200':
          description: Successful response with organized tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizedTags'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - admin
      summary: Create a new tag
      description: Creates a new tag in the specified category
      operationId: createTag
      security: []  # TODO: Authentication not yet implemented - should require ApiKeyAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagRequest'
      responses:
        '200':
          description: Tag created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: integer
                example:
                  success: true
                  id: 42
        '400':
          description: Bad request (missing required fields or invalid category)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/admin/images/{id}:
    get:
      tags:
        - admin
      summary: Get detailed image information
      description: Returns complete image metadata including tags and credit information
      operationId: getImageDetails
      security: []  # TODO: Authentication not yet implemented - should require ApiKeyAuth
      parameters:
        - name: id
          in: path
          description: Image ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response with image details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDetails'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - admin
      summary: Update image metadata
      description: Updates tags and credit information for an image
      operationId: updateImageMetadata
      security: []  # TODO: Authentication not yet implemented - should require ApiKeyAuth
      parameters:
        - name: id
          in: path
          description: Image ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateImageRequest'
      responses:
        '200':
          description: Image metadata updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                example:
                  success: true
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  details:
                    type: string

  /api/admin/upload:
    post:
      tags:
        - admin
      summary: Upload a new image
      description: Uploads an image file to R2 storage and creates a database entry
      operationId: uploadImage
      security: []  # TODO: Authentication not yet implemented - should require ApiKeyAuth
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to upload
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  filename:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad request (no file provided or invalid file)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/admin/sync:
    post:
      tags:
        - admin
      summary: Sync D1 database to KV cache
      description: Synchronizes the active images list from D1 database to KV cache for improved performance
      operationId: syncKVCache
      security: []  # TODO: Authentication not yet implemented - should require ApiKeyAuth
      responses:
        '200':
          description: Sync completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
                    description: Number of images synced
                  message:
                    type: string
                example:
                  success: true
                  count: 187
                  message: Successfully synced 187 images to KV cache
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string

  /api/admin/sync-kv:
    post:
      tags:
        - admin
      summary: Sync D1 database to KV cache (alternative endpoint)
      description: Alternative endpoint for syncing the active images list from D1 database to KV cache
      operationId: syncKVCacheAlt
      security: []  # TODO: Authentication not yet implemented - should require ApiKeyAuth
      responses:
        '200':
          description: Sync completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error

    Tag:
      type: object
      properties:
        name:
          type: string
          description: Tag slug (lowercase, hyphenated)
          example: hello-kitty
        display_name:
          type: string
          description: Human-readable tag name
          example: Hello Kitty
        category:
          type: string
          description: Tag category
          enum: [content, character, creator, source]
      required:
        - name
        - display_name
        - category

    TagWithStats:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        display_name:
          type: string
        category:
          type: string
          enum: [content, character, creator, source]
        usage_count:
          type: integer
          description: Number of images using this tag
      required:
        - id
        - name
        - display_name
        - category
        - usage_count

    OrganizedTags:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TagWithStats'
        character:
          type: array
          items:
            $ref: '#/components/schemas/TagWithStats'
        creator:
          type: array
          items:
            $ref: '#/components/schemas/TagWithStats'
        source:
          type: array
          items:
            $ref: '#/components/schemas/TagWithStats'

    Image:
      type: object
      properties:
        id:
          type: integer
        filename:
          type: string
          example: images/abc123def456.png
        alt_text:
          type: string
          nullable: true
        status:
          type: string
          enum: [active, pending, archived, removed]
        created_at:
          type: string
          format: date-time
        credit_name:
          type: string
          nullable: true
      required:
        - id
        - filename
        - status

    ImageWithTags:
      allOf:
        - $ref: '#/components/schemas/Image'
        - type: object
          properties:
            file_size:
              type: integer
              nullable: true
            width:
              type: integer
              nullable: true
            height:
              type: integer
              nullable: true
            mime_type:
              type: string
              nullable: true
            credit_url:
              type: string
              nullable: true
            credit_license:
              type: string
              nullable: true
            tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'

    ImageDetails:
      allOf:
        - $ref: '#/components/schemas/ImageWithTags'
        - type: object
          properties:
            credit_social:
              type: string
              nullable: true
            credit_platform:
              type: string
              nullable: true
            updated_at:
              type: string
              format: date-time
              nullable: true

    ImageList:
      type: object
      properties:
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        count:
          type: integer
          description: Number of images in this response
        limit:
          type: integer
          description: Maximum number of images requested
        offset:
          type: integer
          description: Number of images skipped
      required:
        - images
        - count
        - limit
        - offset

    Stats:
      type: object
      properties:
        total_images:
          type: integer
          description: Total number of active images
        total_tags:
          type: integer
          description: Total number of tags
        credited_artists:
          type: integer
          description: Number of credited artists (excluding unknown)
      required:
        - total_images
        - total_tags
        - credited_artists

    CreateTagRequest:
      type: object
      properties:
        name:
          type: string
          description: Tag name (will be converted to slug format)
          example: Hello Kitty
        category:
          type: string
          description: Tag category
          enum: [content, character, creator, source]
        display_name:
          type: string
          description: Human-readable display name (optional, defaults to name)
          example: Hello Kitty
      required:
        - name
        - category

    CreditInfo:
      type: object
      properties:
        name:
          type: string
          description: Artist or source name
        url:
          type: string
          nullable: true
          description: URL to artist's website or source
        social_handle:
          type: string
          nullable: true
          description: Social media handle
        platform:
          type: string
          nullable: true
          description: Social media platform
          example: twitter
        license:
          type: string
          nullable: true
          description: License information
          example: CC BY 4.0
      required:
        - name

    UpdateImageRequest:
      type: object
      properties:
        tags:
          type: array
          items:
            type: integer
          description: Array of tag IDs to associate with the image
        credit:
          $ref: '#/components/schemas/CreditInfo'

  securitySchemes:
    # Note: Current implementation does not have explicit authentication
    # This should be added in production for admin endpoints
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for admin endpoints (to be implemented)

# Security is currently not enforced in the code but should be added
# Uncomment and configure when authentication is implemented:
# security:
#   - ApiKeyAuth: []

x-cloudflare-api-shield:
  # Cloudflare API Shield configuration hints
  volumetric-abuse-detection:
    enabled: true
    description: Enable volumetric abuse detection for all endpoints

  rate-limiting:
    # Public endpoints - more permissive
    public-endpoints:
      - /api/random
      - /api/images
      - /api/stats
      - /images.json

    # Admin endpoints - more restrictive
    admin-endpoints:
      - /api/admin/*

  # Suggested rate limits (configure in Cloudflare dashboard)
  suggested-limits:
    /api/random: "100 requests per minute per IP"
    /api/images: "60 requests per minute per IP"
    /api/stats: "30 requests per minute per IP"
    /images.json: "60 requests per minute per IP"
    /api/admin/upload: "10 requests per hour per IP"
    /api/admin/sync: "5 requests per hour per IP"
    /api/admin/*: "30 requests per minute per IP"
